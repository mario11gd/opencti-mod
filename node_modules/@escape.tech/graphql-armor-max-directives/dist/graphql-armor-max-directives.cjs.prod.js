'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var graphql = require('graphql');

function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}

function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

const maxDirectivesDefaultOptions = {
  n: 50,
  exposeLimits: true,
  errorMessage: 'Query validation error.',
  onAccept: [],
  onReject: [],
  propagateOnRejection: true
};
class MaxDirectivesVisitor {
  constructor(context, options) {
    _defineProperty(this, "OperationDefinition", void 0);
    _defineProperty(this, "context", void 0);
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "visitedFragments", void 0);
    this.context = context;
    this.config = Object.assign({}, maxDirectivesDefaultOptions, ...Object.entries(options !== null && options !== void 0 ? options : {}).map(([k, v]) => v === undefined ? {} : {
      [k]: v
    }));
    this.visitedFragments = new Map();
    this.OperationDefinition = {
      enter: this.onOperationDefinitionEnter.bind(this)
    };
  }
  onOperationDefinitionEnter(operation) {
    const directives = this.countDirectives(operation);
    if (directives > this.config.n) {
      const message = this.config.exposeLimits ? `Directives limit of ${this.config.n} exceeded, found ${directives}.` : this.config.errorMessage;
      const err = new graphql.GraphQLError(`Syntax Error: ${message}`);
      for (const handler of this.config.onReject) {
        handler(this.context, err);
      }
      if (this.config.propagateOnRejection) {
        throw err;
      }
    } else {
      for (const handler of this.config.onAccept) {
        handler(this.context, {
          n: directives
        });
      }
    }
  }
  countDirectives(node) {
    let directives = 0;
    if (node.directives) {
      directives += node.directives.length;
    }
    if ('selectionSet' in node && node.selectionSet) {
      for (const child of node.selectionSet.selections) {
        directives += this.countDirectives(child);
      }
    } else if (node.kind === graphql.Kind.FRAGMENT_SPREAD) {
      if (this.visitedFragments.has(node.name.value)) {
        var _this$visitedFragment;
        return (_this$visitedFragment = this.visitedFragments.get(node.name.value)) !== null && _this$visitedFragment !== void 0 ? _this$visitedFragment : 0;
      } else {
        this.visitedFragments.set(node.name.value, -1);
      }
      const fragment = this.context.getFragment(node.name.value);
      if (fragment) {
        const additionalDirectives = this.countDirectives(fragment);
        if (this.visitedFragments.get(node.name.value) === -1) {
          this.visitedFragments.set(node.name.value, additionalDirectives);
        }
        directives += additionalDirectives;
      }
    }
    return directives;
  }
}
const maxDirectivesRule = options => context => new MaxDirectivesVisitor(context, options);
const maxDirectivesPlugin = options => {
  return {
    onValidate({
      addValidationRule
    }) {
      addValidationRule(maxDirectivesRule(options));
    }
  };
};

exports.maxDirectivesDefaultOptions = maxDirectivesDefaultOptions;
exports.maxDirectivesPlugin = maxDirectivesPlugin;
exports.maxDirectivesRule = maxDirectivesRule;
