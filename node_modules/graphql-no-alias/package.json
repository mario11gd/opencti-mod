{
  "name": "graphql-no-alias",
  "version": "3.0.3",
  "private": false,
  "description": "No alias directive for graphql mutation and query types. It can limit the amount of alias fields that can be used for queries and mutations. Preventing batch attacks.",
  "keywords": [
    "graphql",
    "graphql directive",
    "graphql validation",
    "graphql alias",
    "graphql query alias",
    "graphql mutation alias"
  ],
  "author": "ivandotv",
  "license": "MIT",
  "type": "module",
  "main": "./dist/prod/index.cjs",
  "module": "./dist/prod/index.modern.js",
  "exports": {
    "require": "./dist/prod/index.cjs",
    "default": "./dist/prod/index.modern.js"
  },
  "types": "./dist/types/index.d.ts",
  "files": [
    "dist",
    "src"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ivandotv/graphql-no-alias.git"
  },
  "bugs": {
    "url": "https://github.com/ivandotv/graphql-no-alias/issues"
  },
  "homepage": "https://github.com/ivandotv/graphql-no-alias#readme",
  "peerDependencies": {
    "graphql": "^16.2.0"
  },
  "devDependencies": {
    "@babel/core": "^7.16.7",
    "@babel/preset-env": "^7.16.7",
    "@babel/preset-typescript": "^7.16.7",
    "@types/jest": "^27.4.0",
    "@typescript-eslint/eslint-plugin": "^5.8.1",
    "@typescript-eslint/parser": "^5.8.1",
    "eslint": "^8.6.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-jest": "^25.3.4",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-promise": "^6.0.0",
    "eslint-plugin-tsdoc": "^0.2.14",
    "graphql": "^16.2.0",
    "jest": "^27.4.5",
    "jest-watch-typeahead": "^1.0.0",
    "lint-staged": "^12.1.4",
    "microbundle": "^0.15.0",
    "prettier": "^2.5.1",
    "shx": "^0.3.3",
    "typescript": "^4.5.5"
  },
  "scripts": {
    "lint": "eslint --fix \"src/**/\"",
    "lint:check": "eslint \"src/**/\"",
    "lint:ci": "pnpm lint:check && pnpm format:check",
    "format": "prettier --write src/**",
    "format:check": "prettier --check src/**",
    "test": "NODE_ENV=test jest --verbose --coverage --no-cache",
    "test:watch": "NODE_ENV=test jest --watch",
    "test:ci": "NODE_ENV=test jest --runInBand --ci --coverage --coverageDirectory=coverage",
    "build:prod": "NODE_ENV=production microbundle --tsconfig ./tsconfig.json  --format modern,cjs --target node --output dist/prod/index.js",
    "build": "rm -rf ./dist && pnpm build:prod",
    "release": "pnpm run prepublishOnly && pnpm changeset publish",
    "cp": "shx cp ../../README.md ./"
  },
  "readme": "# GraphQl No Alias Directive Validation\n\n[![Test](https://github.com/ivandotv/graphql-no-alias/actions/workflows/CI.yml/badge.svg)](https://github.com/ivandotv/graphql-no-alias/actions/workflows/CI.yml)\n[![Codecov](https://img.shields.io/codecov/c/gh/ivandotv/graphql-no-alias)](https://app.codecov.io/gh/ivandotv/graphql-no-alias)\n[![GitHub license](https://img.shields.io/github/license/ivandotv/graphql-no-alias)](https://github.com/ivandotv/graphql-no-alias/blob/main/LICENSE)\n\n<!-- toc -->\n\n- [Instalation](#instalation)\n- [Usage](#usage)\n  - [Using the directive](#using-the-directive)\n  - [Schema setup](#schema-setup)\n    - [Object type usage](#object-type-usage)\n    - [Field type usage](#field-type-usage)\n  - [Customizing the declaration](#customizing-the-declaration)\n  - [Imperative configuration](#imperative-configuration)\n  - [Customizing the error message](#customizing-the-error-message)\n- [Envelop Plugin](#envelop-plugin)\n- [No Batched Queries Library](#no-batched-queries-library)\n  - [License](#license)\n\n<!-- tocstop -->\n\nGraphql validation with accompanying directive to limit the number of `alias` queries and mutations that can be sent to the GraphQL server.\n\nIt will disable certain kinds of attacks that look like this.\n\n```ts\n  // batch query attack (hello DoS)\n  query {\n    getUsers(first: 1000)\n    second: getUsers(first: 2000)\n    third: getUsers(first: 3000)\n    fourth: getUsers(first: 4000)\n  }\n\n  //  or batch login attack\n  mutation {\n    login(pass: 1111, username: \"ivan\")\n    second: login(pass: 2222, username: \"ivan\")\n    third: login(pass: 3333, username: \"ivan\")\n    fourth: login(pass: 4444, username: \"ivan\")\n  }\n`\n```\n\nYou can read more batching attacks here: https://lab.wallarm.com/graphql-batching-attack/\n\n## Instalation\n\n```sh\nnpm i graphql-no-alias\n```\n\n## Usage\n\nThere are two ways to use this validation:\n\n- Using the `directive` in the `schema`\n- [Using the configuration options](#Imperative-configuration)(better performance)\n\n### Using the directive\n\nThere are two parts, a `@noAlias` directive that needs to be added to the `schema`, and a validation function that needs to be added to the GraphQL server `validationRules` array.\nIn the example that follows `hello` query will be allowed 2 calls per request, while all the mutations will be limited to 1 call per mutation by setting the `@noAlias` directive directly on the `Mutation` type.\n\n```js\nconst express = require('express')\nconst { graphqlHTTP } = require('express-graphql')\nconst { buildSchema } = require('graphql')\n\nconst { createValidation } = require('graphql-no-alias')\n\n// get the validation function and type definition of the declaration\nconst { typeDefs, validation } = createValidation()\n\n//add type defintion to schema\nconst schema = buildSchema(`\n  ${typeDefs}\n  type Query {\n    hello: String @noAlias(allow:2)\n  }\n\n  type Mutation @noAlias {\n    muteOne(n:Int):String\n  }\n`)\n\nconst app = express()\napp.use(\n  '/graphql',\n  graphqlHTTP({\n    schema: schema,\n    rootValue: root,\n    graphiql: true,\n    validationRules: [validation] //add the validation function\n  })\n)\napp.listen(4000)\n```\n\n### Schema setup\n\nThe declaration can be used on the object `type` (Query or Mutation) or type `fields` (particular query or mutation). When the declaration is used on the `type` it affects all the fields of that type (Query or Mutation).\n\n#### Object type usage\n\nIn the next example **all** queries will be limited to only **one call**.\n\n```js\nconst schema = buildSchema(`\n  type Query @noAlias {\n    getUser: User\n    getFriends: [User]!\n  }\n`)\n```\n\nclient reqeust:\n\n```js\nquery {\n  getUser\n  alias_get_user: getUser // Error - validation fails\n  getFriends\n  alias_get_friends: getFriends // Error - validation fails\n}\n```\n\nThe directive also accepts one parameter `allow` which declares the default number of allowed aliases.\nIn the next example, all queries will be allowed to have `3` calls (one original, two aliases)\n\n```js\nvar schema = buildSchema(`\n  type Query @noAlias(allow:3) {\n    getUser: User\n    getFriends: [User]!\n  }\n`)\n```\n\nOn the client:\n\n```js\n  query {\n    getUser\n    alias_2: getUser\n    alias_3: getUser\n    alias_4: getUser // Error - validation fails\n  }\n```\n\n#### Field type usage\n\nUsage on type fields is the same as on the object type, one difference is that when combined with object directive the one on the field will take precedence.\n\nIn the next example, all query fields will be allowed `3` batch calls, except the `getFriends` query, which will be allowed only `1`.\n\n```js\nvar schema = buildSchema(`\n  type Query @noAlias(allow:3) {\n    getUser: User\n    getFriends: [User]! @noAlias(allow:1) //same as @noAlias\n  }\n`)\n```\n\nclient request:\n\n```js\n  query {\n    getUser\n    alias_2: getUser\n    alias_3: getUser\n\t  getFriends\n\t  alias_1: getFriends // Error - validation fails\n  }\n```\n\n### Customizing the declaration\n\nThe declaration can be customized to have a different name, and different default `allow` values, and it can also be passed a custom error function that is executed when the validation fails.\n\nIn the next example, `validation` will allow `3` calls to the same field by default, the directive name will be changed to `NoBatchCalls`, and there will be a custom error message.\n\n```ts\nconst defaultAllow = 3\nconst directiveName = 'NoBatchCalls'\n\nconst { typeDefs, validation } = createValidation({\n  defaultAllow,\n  directiveName\n})\n```\n\nUsage:\n\n```js\nconst schema = buildSchema(`\n  type Query @noBatchCalls {\n    getUser: User @noBatchCalls(allow:4)\n    getFriends: [User]!\n  }\n`)\n```\n\n### Imperative configuration\n\nWith imperative configuration, there is no need for type definition and schema modification. Instead, we use a configuration object.\nThis results in better performance since the `schema` is not analyzed (not looking for directives).\n\n```ts\nconst permissions = {\n  Query: {\n    '*': 2, // default value for all queries\n    getAnotherUser: 5 // custom value for specific query\n  },\n  Mutation: {\n    '*': 1 //default value for all mutations\n  }\n}\nconst { validation } = createValidation({ permissions })\n\nconst schema = buildSchema(/* GraphQL */ `\n  type Query {\n    getUser: User\n    getAnotherUser: User\n  }\n  type User {\n    name: String\n  }\n`)\n\nconst app = express()\n\napp.use(\n  '/graphql',\n  graphqlHTTP({\n    schema: schema,\n    rootValue: root,\n    graphiql: true,\n    validationRules: [validation] //add the validation function\n  })\n)\napp.listen(4000)\n```\n\nPlease note that when the `permissions` object is passed to the configuration, schema directives will be ignored.\n\n### Customizing the error message\n\nContinuing from the previous example, the `error` message that is reported when the validation fails can also be customized. You can return a `GrahphQLError` instance or just a `string` that will be used as the error message.\n\n```ts\nconst { typeDefs, validation } = createValidation({errorFn:(\n  typeName: string, //type name Query or Mutation\n  fieldName: string,\n  maxAllowed: number,\n  node: FieldNode,\n  ctx: ValidationContext\n): GraphQLError {\n  return new GraphQLError(\n    `Hey! allowed number of calls for ${typeName}->${fieldName} has been exceeded (max: ${maxAllowed})`\n  )\n  //or return string\n  return 'custom message'\n}\n})\n```\n\n## Envelop Plugin\n\nIf you are using [GraphQL Envelop](https://www.envelop.dev/). I have made a [plugin](packages/envelop/README.md) that uses this directive.\n\n## No Batched Queries Library\n\nI've also created another validation library: [No batched queries](https://github.com/ivandotv/graphql-no-batched-queries), which limits the number of **all** queries and mutations that could be sent per request. It pairs nicely with this validation, so you could allow for example, 3 queries to be sent and then use `noAlias` directive to disable duplicate queries.\n\n### License\n\nThis project is licensed under the MIT License - see [LICENSE](LICENSE) file for details\n"
}