import { ASTVisitor, FieldNode, GraphQLError, ValidationContext } from 'graphql';
export declare type ErrorFn = typeof createErrorMsg;
/**
 * Configuration object for the createValidation function
 */
declare type Permissions = {
    [key: string]: Permissions | number;
};
export declare type Config = {
    permissions?: Permissions;
    /** How many aliases (calls) to allow by default */
    defaultAllow?: number;
    /** directive name to use*/
    directiveName?: string;
    /** function that should return a graphql erorr or string when the validation fails*/
    errorFn?: ErrorFn;
};
export declare type CreateDefinitionOptions = {
    /** name of the directive*/
    directiveName?: string;
    /** default allow count*/
    defaultAllow?: number;
};
/**
 * Creates validation
 * @param config - {@link Config}
 * @returns validation function
 */
export declare function createValidation(config?: Config): {
    typeDefs: string;
    validation: (context: ValidationContext) => ASTVisitor;
};
/**
 * Creates type definitions
 * @param opts - {@link CreateDefinitionOptions}
 * @returns type definition
 */
export declare function createTypeDefinition(opts?: CreateDefinitionOptions): string;
/**
 * Creates custom GraphQLError instance
 * @param typeName - Object type name
 * @param fieldName - Object field name
 * @param maxAllowed - max allowed count that has been reached
 */
declare function createErrorMsg(typeName: string, fieldName: string, maxAllowed: number, node: FieldNode, _ctx: ValidationContext): GraphQLError | string;
export {};
