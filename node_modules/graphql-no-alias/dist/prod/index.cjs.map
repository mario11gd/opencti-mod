{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import {\n  ASTVisitor,\n  ConstDirectiveNode,\n  FieldNode,\n  GraphQLError,\n  GraphQLObjectType,\n  ValidationContext\n} from 'graphql'\n\n//https://graphql.org/graphql-js/language/#visitor\n\nexport type ErrorFn = typeof createErrorMsg\n\n/**\n * Configuration object for the createValidation function\n */\ntype Permissions = { [key: string]: Permissions | number }\n\nexport type Config = {\n  permissions?: Permissions\n  /** How many aliases (calls) to allow by default */\n  defaultAllow?: number\n  /** directive name to use*/\n  directiveName?: string\n  /** function that should return a graphql erorr or string when the validation fails*/\n  errorFn?: ErrorFn\n}\n\nexport type CreateDefinitionOptions = {\n  /** name of the directive*/\n  directiveName?: string\n  /** default allow count*/\n  defaultAllow?: number\n}\n\n/** default allow count*/\nconst DEFAULT_ALLOW = 1\n/** default directive name*/\nconst DIRECTIVE_NAME = 'noAlias'\n\n/**\n * Creates validation\n * @param config - {@link Config}\n * @returns validation function\n */\nexport function createValidation(config?: Config): {\n  typeDefs: string\n  validation: (context: ValidationContext) => ASTVisitor\n} {\n  const { directiveName, defaultAllow, errorFn, permissions } = {\n    ...{\n      defaultAllow: DEFAULT_ALLOW,\n      directiveName: DIRECTIVE_NAME,\n      errorFn: createErrorMsg\n    },\n    ...(config || {})\n  }\n\n  return {\n    typeDefs: createTypeDefinition({ directiveName, defaultAllow }),\n    validation(context: ValidationContext): ASTVisitor {\n      const ast: ASTVisitor = {\n        Field: {\n          leave: createFieldValidation(\n            context,\n            directiveName,\n            defaultAllow,\n            errorFn,\n            permissions\n          )\n        }\n      }\n\n      return ast\n    }\n  }\n}\n\n/**\n * Creates type definitions\n * @param opts - {@link CreateDefinitionOptions}\n * @returns type definition\n */\nexport function createTypeDefinition(opts?: CreateDefinitionOptions): string {\n  return `directive @${opts?.directiveName ?? DIRECTIVE_NAME}(allow: Int = ${\n    opts?.defaultAllow ?? DEFAULT_ALLOW\n  }) on OBJECT | FIELD_DEFINITION`\n}\n\nfunction configPermissionWalker(\n  permissions: Permissions,\n  result: Map<string, number>,\n  parentKey?: string\n): void {\n  Object.entries(permissions).forEach(([key, value]) => {\n    if (typeof value === 'object') {\n      configPermissionWalker(\n        value,\n        result,\n        `${parentKey ? parentKey : ''}${parentKey && key ? '.' : ''}${\n          key ? key : ''\n        }`\n      )\n    } else {\n      if (key === '*') {\n        result.set(parentKey!, value)\n      } else {\n        result.set(`${parentKey ? parentKey : ''}.${key}`, value)\n      }\n    }\n  })\n}\n\nfunction buildPermissionTableFromConfig(permissions: any): Map<string, number> {\n  const result = new Map()\n  configPermissionWalker(permissions, result, undefined)\n\n  return result\n}\n\nfunction createFieldValidation(\n  context: ValidationContext,\n  directiveName: string,\n  defaultAllow: number,\n  errorFn: ErrorFn,\n  permissions?: Permissions\n): (node: FieldNode) => void {\n  const schema = context.getSchema()\n\n  let allowedCount: Map<string, number>\n\n  if (permissions) {\n    allowedCount = buildPermissionTableFromConfig(permissions)\n  } else {\n    allowedCount = buildPermissionTableFromSchema(defaultAllow, directiveName, [\n      schema.getQueryType(),\n      schema.getMutationType()\n    ])\n  }\n\n  const currentCount: Map<string, number> = new Map()\n  //track if the error have already been reported for particular field\n  const errorMap: Map<string, boolean> = new Map()\n\n  return (node: FieldNode) => {\n    const parentTypeName = context.getParentType()?.name\n\n    if (parentTypeName === 'Query' || parentTypeName === 'Mutation') {\n      checkCount(context, node, allowedCount, currentCount, errorFn, errorMap)\n    }\n  }\n}\n\n/**\n * Checks if allowed alias count has been exceeded\n */\nfunction checkCount(\n  ctx: ValidationContext,\n  node: FieldNode,\n  maxAllowedData: Map<string, number>,\n  currentCountData: Map<string, number>,\n  errorFn: typeof createErrorMsg,\n  errorMap: Map<string, boolean>\n): void {\n  const nodeName = node.name.value\n  const typeName = ctx.getParentType()!.name\n  const typeKey = `${typeName}`\n  const fieldKey = `${typeKey}.${nodeName}`\n  const maxAllowed = maxAllowedData.get(fieldKey) || maxAllowedData.get(typeKey)\n\n  if (maxAllowed) {\n    let currentCount = currentCountData.get(fieldKey) ?? 0\n    currentCount++\n    if (currentCount > maxAllowed) {\n      // check if already reported for the current field\n      if (!errorMap.get(fieldKey)) {\n        const errorResult = errorFn(typeName, nodeName, maxAllowed, node, ctx)\n        ctx.reportError(\n          typeof errorResult === 'string'\n            ? new GraphQLError(errorResult)\n            : errorResult\n        )\n        errorMap.set(fieldKey, true)\n      }\n\n      return\n    }\n\n    currentCountData.set(fieldKey, currentCount)\n  }\n}\n\n/**\n * Process appropriate schema types (Query, Mutation) and resolve all directive values by\n * building a mapping between type fields and allowed values\n */\nfunction buildPermissionTableFromSchema(\n  defaultAllow: number,\n  directiveName: string,\n  types: (GraphQLObjectType | undefined | null)[]\n): Map<string, number> {\n  const maxAllowed = new Map<string, number>()\n\n  for (const graphType of types) {\n    const value = graphType\n      ? processDirective(\n          directiveName,\n          defaultAllow,\n          // @ts-expect-error - directives array is typed as readonly\n          graphType?.astNode?.directives\n        )\n      : undefined\n\n    if (value) {\n      maxAllowed.set(`${graphType!.name}`, value)\n    }\n\n    if (graphType?.astNode?.fields) {\n      for (const field of Object.values(graphType.astNode.fields)) {\n        const value = processDirective(\n          directiveName,\n          defaultAllow,\n          // @ts-expect-error - directives array is typed as readonly\n          field.directives\n        )\n        if (value) {\n          maxAllowed.set(`${graphType}.${field.name.value}`, value)\n        }\n      }\n    }\n  }\n\n  return maxAllowed\n}\n\nfunction processDirective(\n  directiveName: string,\n  defaultValue: number,\n  directives?: ConstDirectiveNode[]\n): number | undefined {\n  return directives\n    ?.filter((directive) => directive.name.value === directiveName)\n    .map((dir) => {\n      if (dir.arguments && dir.arguments[0]) {\n        // @ts-expect-error - wrong types\n        return parseInt(dir.arguments[0].value.value, 10)\n      }\n\n      return defaultValue\n    })[0]\n}\n\n/**\n * Creates custom GraphQLError instance\n * @param typeName - Object type name\n * @param fieldName - Object field name\n * @param maxAllowed - max allowed count that has been reached\n */\nfunction createErrorMsg(\n  typeName: string,\n  fieldName: string,\n  maxAllowed: number,\n  node: FieldNode,\n  _ctx: ValidationContext\n): GraphQLError | string {\n  return new GraphQLError(\n    `Allowed number of calls for ${typeName}->${fieldName} has been exceeded (max: ${maxAllowed})`,\n    node\n  )\n}\n"],"names":["DEFAULT_ALLOW","DIRECTIVE_NAME","createValidation","config","directiveName","defaultAllow","errorFn","permissions","createErrorMsg","typeDefs","createTypeDefinition","validation","context","ast","Field","leave","createFieldValidation","opts","configPermissionWalker","result","parentKey","Object","entries","forEach","key","value","set","buildPermissionTableFromConfig","Map","undefined","schema","getSchema","allowedCount","buildPermissionTableFromSchema","getQueryType","getMutationType","currentCount","errorMap","node","parentTypeName","getParentType","name","checkCount","ctx","maxAllowedData","currentCountData","nodeName","typeName","typeKey","fieldKey","maxAllowed","get","errorResult","reportError","GraphQLError","types","graphType","processDirective","astNode","directives","fields","field","values","defaultValue","filter","directive","map","dir","arguments","parseInt","fieldName","_ctx"],"mappings":";;;;;;;;;;;;;;;;;;;;AAmCA;;AACA,MAAMA,aAAa,GAAG,CAAtB;AACA;;AACA,MAAMC,cAAc,GAAG,SAAvB;AAEA;;;;;;SAKgBC,iBAAiBC;AAI/B,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA,OAA/B;AAAwCC,IAAAA;AAAxC,mBACD;AACDF,IAAAA,YAAY,EAAEL,aADb;AAEDI,IAAAA,aAAa,EAAEH,cAFd;AAGDK,IAAAA,OAAO,EAAEE;AAHR,GADC,EAMAL,MAAM,IAAI,EANV,CAAN;;AASA,SAAO;AACLM,IAAAA,QAAQ,EAAEC,oBAAoB,CAAC;AAAEN,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,KAAD,CADzB;;AAELM,IAAAA,UAAU,CAACC,OAAD;AACR,YAAMC,GAAG,GAAe;AACtBC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAEC,qBAAqB,CAC1BJ,OAD0B,EAE1BR,aAF0B,EAG1BC,YAH0B,EAI1BC,OAJ0B,EAK1BC,WAL0B;AADvB;AADe,OAAxB;AAYA,aAAOM,GAAP;AACD;;AAhBI,GAAP;AAkBD;AAED;;;;;;SAKgBH,qBAAqBO;;;AACnC,uBAAO,uBAAcA,IAAd,oBAAcA,IAAI,CAAEb,aAApB,kCAAqCH,+BAArC,sBACLgB,IADK,oBACLA,IAAI,CAAEZ,YADD,iCACiBL,6CADxB;AAGD;;AAED,SAASkB,sBAAT,CACEX,WADF,EAEEY,MAFF,EAGEC,SAHF;AAKEC,EAAAA,MAAM,CAACC,OAAP,CAAef,WAAf,EAA4BgB,OAA5B,CAAoC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD;AAClC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BP,MAAAA,sBAAsB,CACpBO,KADoB,EAEpBN,MAFoB,KAGjBC,SAAS,GAAGA,SAAH,GAAe,KAAKA,SAAS,IAAII,GAAb,GAAmB,GAAnB,GAAyB,KACvDA,GAAG,GAAGA,GAAH,GAAS,IAJM,CAAtB;AAOD,KARD,MAQO;AACL,UAAIA,GAAG,KAAK,GAAZ,EAAiB;AACfL,QAAAA,MAAM,CAACO,GAAP,CAAWN,SAAX,EAAuBK,KAAvB;AACD,OAFD,MAEO;AACLN,QAAAA,MAAM,CAACO,GAAP,IAAcN,SAAS,GAAGA,SAAH,GAAe,MAAMI,KAA5C,EAAmDC,KAAnD;AACD;AACF;AACF,GAhBD;AAiBD;;AAED,SAASE,8BAAT,CAAwCpB,WAAxC;AACE,QAAMY,MAAM,GAAG,IAAIS,GAAJ,EAAf;AACAV,EAAAA,sBAAsB,CAACX,WAAD,EAAcY,MAAd,EAAsBU,SAAtB,CAAtB;AAEA,SAAOV,MAAP;AACD;;AAED,SAASH,qBAAT,CACEJ,OADF,EAEER,aAFF,EAGEC,YAHF,EAIEC,OAJF,EAKEC,WALF;AAOE,QAAMuB,MAAM,GAAGlB,OAAO,CAACmB,SAAR,EAAf;AAEA,MAAIC,YAAJ;;AAEA,MAAIzB,WAAJ,EAAiB;AACfyB,IAAAA,YAAY,GAAGL,8BAA8B,CAACpB,WAAD,CAA7C;AACD,GAFD,MAEO;AACLyB,IAAAA,YAAY,GAAGC,8BAA8B,CAAC5B,YAAD,EAAeD,aAAf,EAA8B,CACzE0B,MAAM,CAACI,YAAP,EADyE,EAEzEJ,MAAM,CAACK,eAAP,EAFyE,CAA9B,CAA7C;AAID;;AAED,QAAMC,YAAY,GAAwB,IAAIR,GAAJ,EAA1C;;AAEA,QAAMS,QAAQ,GAAyB,IAAIT,GAAJ,EAAvC;AAEA,SAAQU,IAAD;;;AACL,UAAMC,cAAc,4BAAG3B,OAAO,CAAC4B,aAAR,EAAH,qBAAG,sBAAyBC,IAAhD;;AAEA,QAAIF,cAAc,KAAK,OAAnB,IAA8BA,cAAc,KAAK,UAArD,EAAiE;AAC/DG,MAAAA,UAAU,CAAC9B,OAAD,EAAU0B,IAAV,EAAgBN,YAAhB,EAA8BI,YAA9B,EAA4C9B,OAA5C,EAAqD+B,QAArD,CAAV;AACD;AACF,GAND;AAOD;AAED;;;;;AAGA,SAASK,UAAT,CACEC,GADF,EAEEL,IAFF,EAGEM,cAHF,EAIEC,gBAJF,EAKEvC,OALF,EAME+B,QANF;AAQE,QAAMS,QAAQ,GAAGR,IAAI,CAACG,IAAL,CAAUhB,KAA3B;AACA,QAAMsB,QAAQ,GAAGJ,GAAG,CAACH,aAAJ,GAAqBC,IAAtC;AACA,QAAMO,OAAO,MAAMD,UAAnB;AACA,QAAME,QAAQ,MAAMD,WAAWF,UAA/B;AACA,QAAMI,UAAU,GAAGN,cAAc,CAACO,GAAf,CAAmBF,QAAnB,KAAgCL,cAAc,CAACO,GAAf,CAAmBH,OAAnB,CAAnD;;AAEA,MAAIE,UAAJ,EAAgB;AAAA;;AACd,QAAId,YAAY,4BAAGS,gBAAgB,CAACM,GAAjB,CAAqBF,QAArB,CAAH,oCAAqC,CAArD;AACAb,IAAAA,YAAY;;AACZ,QAAIA,YAAY,GAAGc,UAAnB,EAA+B;AAC7B;AACA,UAAI,CAACb,QAAQ,CAACc,GAAT,CAAaF,QAAb,CAAL,EAA6B;AAC3B,cAAMG,WAAW,GAAG9C,OAAO,CAACyC,QAAD,EAAWD,QAAX,EAAqBI,UAArB,EAAiCZ,IAAjC,EAAuCK,GAAvC,CAA3B;AACAA,QAAAA,GAAG,CAACU,WAAJ,CACE,OAAOD,WAAP,KAAuB,QAAvB,GACI,IAAIE,oBAAJ,CAAiBF,WAAjB,CADJ,GAEIA,WAHN;AAKAf,QAAAA,QAAQ,CAACX,GAAT,CAAauB,QAAb,EAAuB,IAAvB;AACD;;AAED;AACD;;AAEDJ,IAAAA,gBAAgB,CAACnB,GAAjB,CAAqBuB,QAArB,EAA+Bb,YAA/B;AACD;AACF;AAED;;;;;;AAIA,SAASH,8BAAT,CACE5B,YADF,EAEED,aAFF,EAGEmD,KAHF;AAKE,QAAML,UAAU,GAAG,IAAItB,GAAJ,EAAnB;;AAEA,OAAK,MAAM4B,SAAX,IAAwBD,KAAxB,EAA+B;AAAA;;AAC7B,UAAM9B,KAAK,GAAG+B,SAAS,GACnBC,gBAAgB,CACdrD,aADc,EAEdC,YAFc;AAIdmD,IAAAA,SAJc,0CAIdA,SAAS,CAAEE,OAJG,qBAId,mBAAoBC,UAJN,CADG,GAOnB9B,SAPJ;;AASA,QAAIJ,KAAJ,EAAW;AACTyB,MAAAA,UAAU,CAACxB,GAAX,IAAkB8B,SAAU,CAACf,MAA7B,EAAqChB,KAArC;AACD;;AAED,QAAI+B,SAAJ,mCAAIA,SAAS,CAAEE,OAAf,aAAI,oBAAoBE,MAAxB,EAAgC;AAC9B,WAAK,MAAMC,KAAX,IAAoBxC,MAAM,CAACyC,MAAP,CAAcN,SAAS,CAACE,OAAV,CAAkBE,MAAhC,CAApB,EAA6D;AAC3D,cAAMnC,KAAK,GAAGgC,gBAAgB,CAC5BrD,aAD4B,EAE5BC,YAF4B;AAI5BwD,QAAAA,KAAK,CAACF,UAJsB,CAA9B;;AAMA,YAAIlC,KAAJ,EAAW;AACTyB,UAAAA,UAAU,CAACxB,GAAX,IAAkB8B,aAAaK,KAAK,CAACpB,IAAN,CAAWhB,OAA1C,EAAmDA,KAAnD;AACD;AACF;AACF;AACF;;AAED,SAAOyB,UAAP;AACD;;AAED,SAASO,gBAAT,CACErD,aADF,EAEE2D,YAFF,EAGEJ,UAHF;AAKE,SAAOA,UAAP,oBAAOA,UAAU,CACbK,MADG,CACKC,SAAD,IAAeA,SAAS,CAACxB,IAAV,CAAehB,KAAf,KAAyBrB,aAD5C,EAEJ8D,GAFI,CAECC,GAAD;AACH,QAAIA,GAAG,CAACC,SAAJ,IAAiBD,GAAG,CAACC,SAAJ,CAAc,CAAd,CAArB,EAAuC;AACrC;AACA,aAAOC,QAAQ,CAACF,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiB3C,KAAjB,CAAuBA,KAAxB,EAA+B,EAA/B,CAAf;AACD;;AAED,WAAOsC,YAAP;AACD,GATI,EASF,CATE,CAAP;AAUD;AAED;;;;;;;;AAMA,SAASvD,cAAT,CACEuC,QADF,EAEEuB,SAFF,EAGEpB,UAHF,EAIEZ,IAJF,EAKEiC,IALF;AAOE,SAAO,IAAIjB,oBAAJ,gCAC0BP,aAAauB,qCAAqCpB,aAD5E,EAELZ,IAFK,CAAP;AAID;;;;;"}